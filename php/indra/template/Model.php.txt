<?php

namespace {{ namespace }};

use indra\service\Context;
use indra\object\DomainObject;
use indra\object\Model;
use indra\storage\BaseRevision;

/**
 * This class was auto-generated. Do not change it, for it will be overwritten.
 */
class {{ className }} extends Model
{
    /**
     * @return {{ typeName }}
     */
    public function create{{ typeName }}()
    {
        $type = $this->getType();
        $object = new {{ typeName }}($type, Context::getIdGenerator()->generateId());
        return $object;
    }

    public function create{{ typeName }}From(DomainObject $existingObject)
    {
        $type = $this->getType();
        $object = new {{ typeName }}($type, $existingObject->getId());
        $object->setAttributeValues($existingObject->getAttributeValues());
        return $object;
    }

    public function save{{ typeName }}({{ typeName }} $object)
    {
        $branch = $this->domain->getActiveBranch();

        if ($this->domain->usesRevisions()) {
            $this->domain->addToSaveList($object);
        } else {
            $revision = $this->domain->getActiveRevision();
            Context::getTripleStore()->save($object, $revision, $branch);
            $this->domain->getViewStore()->updateView($object);
        }
    }

    public function load{{ typeName }}($indraId)
    {
        $object = new {{ typeName }}($this->getType(), $indraId);
        Context::getTripleStore()->load($object, $this->domain->getActiveBranch());
        return $object;
    }

    public function remove{{ typeName }}({{ typeName }} $object)
    {
        Context::getTripleStore()->remove($object, $this->domain->getActiveBranch());
    }

    private $type;

#todo: this function should be generated inside Object.php.txt and not injected in Object
    private function getType()
    {
        return $this->type ?: $this->type = new {{ typeClassName }};
    }
}
